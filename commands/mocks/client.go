// Code generated by MockGen. DO NOT EDIT.
// Source: commands/cmd.go
//
// Generated by this command:
//
//	mockgen -package mocks -source commands/cmd.go -destination commands/mocks/client.go -mock_names fireactionsClient=Client fireactionsClient
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	fireactions "github.com/hostinger/fireactions"
	gomock "go.uber.org/mock/gomock"
)

// Client is a mock of fireactionsClient interface.
type Client struct {
	ctrl     *gomock.Controller
	recorder *ClientMockRecorder
}

// ClientMockRecorder is the mock recorder for Client.
type ClientMockRecorder struct {
	mock *Client
}

// NewClient creates a new mock instance.
func NewClient(ctrl *gomock.Controller) *Client {
	mock := &Client{ctrl: ctrl}
	mock.recorder = &ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Client) EXPECT() *ClientMockRecorder {
	return m.recorder
}

// GetPool mocks base method.
func (m *Client) GetPool(ctx context.Context, name string) (*fireactions.Pool, *fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPool", ctx, name)
	ret0, _ := ret[0].(*fireactions.Pool)
	ret1, _ := ret[1].(*fireactions.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPool indicates an expected call of GetPool.
func (mr *ClientMockRecorder) GetPool(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPool", reflect.TypeOf((*Client)(nil).GetPool), ctx, name)
}

// ListPools mocks base method.
func (m *Client) ListPools(ctx context.Context, opts *fireactions.ListOptions) (fireactions.Pools, *fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPools", ctx, opts)
	ret0, _ := ret[0].(fireactions.Pools)
	ret1, _ := ret[1].(*fireactions.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPools indicates an expected call of ListPools.
func (mr *ClientMockRecorder) ListPools(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPools", reflect.TypeOf((*Client)(nil).ListPools), ctx, opts)
}

// PausePool mocks base method.
func (m *Client) PausePool(ctx context.Context, name string) (*fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PausePool", ctx, name)
	ret0, _ := ret[0].(*fireactions.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PausePool indicates an expected call of PausePool.
func (mr *ClientMockRecorder) PausePool(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PausePool", reflect.TypeOf((*Client)(nil).PausePool), ctx, name)
}

// Reload mocks base method.
func (m *Client) Reload(ctx context.Context) (*fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", ctx)
	ret0, _ := ret[0].(*fireactions.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reload indicates an expected call of Reload.
func (mr *ClientMockRecorder) Reload(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*Client)(nil).Reload), ctx)
}

// ResumePool mocks base method.
func (m *Client) ResumePool(ctx context.Context, name string) (*fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumePool", ctx, name)
	ret0, _ := ret[0].(*fireactions.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResumePool indicates an expected call of ResumePool.
func (mr *ClientMockRecorder) ResumePool(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumePool", reflect.TypeOf((*Client)(nil).ResumePool), ctx, name)
}

// ScalePool mocks base method.
func (m *Client) ScalePool(ctx context.Context, name string) (*fireactions.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScalePool", ctx, name)
	ret0, _ := ret[0].(*fireactions.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScalePool indicates an expected call of ScalePool.
func (mr *ClientMockRecorder) ScalePool(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScalePool", reflect.TypeOf((*Client)(nil).ScalePool), ctx, name)
}
